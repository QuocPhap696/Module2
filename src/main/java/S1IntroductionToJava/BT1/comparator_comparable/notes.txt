public class Employee implements Comparable<Employee> {
//comparable là so sánh và sắp xếp hai đối tượng trong 1 mảng(employee)

@Override
    public int compareTo(Employee o) {
        if (this.age > o.getAge()) {
            return 1;
        } else if (this.age == o.getAge()) {
            return 0;
        }else
            return -1;
    }
}


/////////
  @Override
    public boolean equals(Object obj) {
    //equals : so sánh (vì ko so sánh bằng được nên phải dùng equals)
    // 2 chuỗi khác nhau trả về flase, bằng nhau trả về true.

        if (this == obj) {
            return true;
        }
        if (obj instanceof Employee) {
            Employee o1 = (Employee) obj;
            if (this.getName().equals(o1.getName()) && this.getAge() == ((Employee) obj).getAge()
            && this.getSalary() == ((Employee) obj).getSalary()) {
                return true;
            }
        }
        return false;
    }


    @Override
    public int hashCode() {

    //hashCode : mã băm, mỗi object đều có 1 định danh và định danh để phân biệt mỗi object chính hashcode
        return Objects.hash(this.age, this.name, this.salary);
    }

////////////////

 public class CompareByAge implements Comparator<Employee> {
 //sắp xếp các đối tượng của lớp do nguời dùng định nghĩa.
 }

 ///////////////

 public class CompareBySalary implements Comparator<Employee> {
 //sắp xếp đối tượng trong Employee
     @Override
 // nếu o1 > o2 : return 1
        01 = 02 : trả về là 0
        ko thì trả về -1
     public int compare(Employee o1, Employee o2) {
         if (o1.getSalary() > o2.getSalary()) {
             return 1;
         } else if (o1.getSalary() == o2.getSalary()) {
             return 0;
         }else {
             return -1;
         }
     }
 }

 ///////////////

 public static void sortPrimitive() {
         int[] arr = {6, 1, 5, 8, 2};
 //thực hiện vòng lặp để sắp xếp mảng từ nhỏ đến lớn.

         for (int i = 0; i < arr.length - 1; i++) {
             for (int j = i + 1; j < arr.length; j++) {
                 if (arr[j] < arr[i]) {
                     int temp = arr[i];
                     arr[i] = arr[j];
                     arr[j] = temp;
                 }
             }
