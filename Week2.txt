### 16 / 03 ###
* Vì sao java không cho kế thừa : java không hỗ trợ đa kế thừa. Đa kế thừa dẫn đến "diamond problem"
	"diamond problem" : vấn đề này xảy ra khi 2 lớp cha của một lớp có 1 cơ sở chung

Person  => Student  => TA  *Lớp TA nhận được 2 bản sao của tất cả các thuộc tính của lớp Person
        => Faculty
 *Java hỗ trợ 1 phần nào đó đa kế thừa bằng các interface.

* Lớp Abstract Class : nghĩa là 1 lớp trừu tượng.Abstract Class sẽ khai báo 1 hoặc nhiều method trừu tượng trong OOP. Có thể gồm method cụ thể hoặc method trừu tượng. Với Abstract Class 1 lớp thường sẽ là method trừu tượng.
+ Lớp con cụ thể hơn lớp cha, lớp cha "chung chung" hơn lớp con.
+ Trong kế thừa, càng lên cao thì tính cụ thể càng ít, tính trừu tượng càng tăng lên.
+ Những lớp có tính trừu tượng rất cao, đến mức không thể tạo được các đối tượng của lớp đó thì gọi là lớp trừu tượng.
=> Phương thức : abstract void printStatus(); //khai báo phương thức với từ khoá abstract và không có thân pthuc.

VD :
 abstract class Bike{
  abstract void run();
}
class Honda4 extends Bike{
    void run() {
        System.out.println("running safely..");
    }

    public static void main(String args[]) {
        Bike obj = new Honda4();
        obj.run();
    }
}  kqua : running safely..
=> Bike là lớp trừu tượng chỉ chứa 1 phthuc trừu tượng là run. Được cung cấp bởi lớp Honda.
* Khi nào sử dụng abstract class : khi 1 nhóm đối tượng có cùng bản chất kế thừa từ 1 class
      Còn interface : khi 1 nhóm đối tượng không có cùng bản chất nhưng chúng có hành động giống nhau.
* Các tính chất của lớp abstract class :
   + không hỗ trợ đa kế thừa, không thể khởi tạo đối tượng.
   + ko cho phép khai báo nội dung, nó chỉ định nghĩa tên, tham số đầu vào.
   + Mức truy cập hàm của abstract class phải ở project hoặc public. Mục đích để lớp kế thừa
     định nghĩa lại thuộc tính của lớp abstract class ko được khai báo.

* Interface : là tập hợp các phương thức abstract(trừu tượng). Khi 1 lớp kế thừa interface, thì nó sẽ kế thừa
	      những phthuc abstract của interface đó.
* Các tính chất của Interface :
   + Là 1 khuôn mẫu, ko phải là lớp đối tượng.
   + Để khai báo interface, cần dùng từ khoá của interface thay cho các class.
   + Tất cả hàm interface đều được ở dạng khai báo ko được định nghĩa.
   + Interface là cấu trúc trong lập trình hướng đối tượng, cho phép các class được implements(đính kèm)
   + Interface không thể khởi tạo.
   + Pthuc có trong Interface bắt buộc phải là pthuc trừu tượng.
   + Pthuc có trong Interface sẽ được định nghĩa với khả năng public, ko được định nghĩa nội dung.
   + Một class có thể implements(đính kèm) được nhiều interface. Interface có thể thực hiện extends(kế thừa) với nhau.

Khai báo : interface < tên interface > {
		//khai báo các thành phần bên trong interface
	   }
VD :  public interface Flyable {
	  String fly();
	}
      public class Bird implementsFlyable {
	@Override
	public String fly () {
	    return "Flying with wings"
	  }
	}
* Khi nào dùng abstract class và interface :
  + Interface : 	Khi 1 class có thể thực hiện nhiều interface(tạm gọi là thừa kế)
			Không thể định nghĩa code xử lý, chỉ có thể khai báo.
			Mọi phương thức, property đều mặc định là public.
			Mọi pthuc, property của interface cần được thực hiện trong class.
			Không thể khởi tạo đối tượng.

  + abstract class :   Không hỗ trợ đa thừa kế
			Có thể định nghĩa hoặc không thân phương thức, property.
			Có thể xác định modifier

### 20 / 03 ### 

Comparable và Comparator : cả 2 đều là các giao diện và có thể sử dụng để sắp xếp các phần tử collection.
			  đều dùng để so sánh giá trị và java dựa vào đó để scp tăng hay giảm dần.
 * Khác nhau :
 Comparable : + PHẢI implements(thực hiện) giao tiếp Comparable cho lớp đối tượng cần được so sánh.
	     + Comparable cung cấp phương thức compareTo() để sxep các phần tử.
	     + thuộc về java.lang package
	     + có thể step các phần tử của kiểu Comparable bởi pthuc Collections.sort(List)
	     + Pthuc compareTo() sử dụng để so sánh đối tượng hiện tại đối với đối tượng được chỉ định.

 Comparator : + KHÔNG cần phải implements giao tiếp Comparator cho lớp đối tượng cần so sánh.
	      + cung cấp phương thức compare() để sắp xếp các phần tử.
	      + thuộc về java.util package
	      + có thể sắp xếp các phần tử của kiểu Comparator bởi pthuc Collection.sort(List, Comparator)
	      + chứa 2 pthuc là compare(Object obj1, Object obj2) và equals(Object element)
	     

VD :  Comparable :

public class ComparableExample {
    public static void main(String[] args) {
        // create student list
        List<Student> studentList = new ArrayList<>();
        studentList.add(new Student(1,"Linh",24, 8.22));
        studentList.add(new Student(2,"Nguyen",21, 8.44));
        studentList.add(new Student(3,"Thu",22, 7.84));
        studentList.add(new Student(4,"Phuong Anh",22, 7.03));
        // sort student list
        Collections.sort(studentList);
        // show student list
        for (Student student : studentList){
            System.out.println(student.toString());
        }
    }
}
	Comparator : 

public class ComparatorExample {
    public static void main(String[] args) {
        // create student list
        List <Student> studentList = new ArrayList<>();
        studentList.add(new Student(1,"Linh",24, 8.22));
        studentList.add(new Student(2,"Nguyen",21, 8.44));
        studentList.add(new Student(3,"Thu",22, 7.84));
        studentList.add(new Student(4,"Phuong Anh",22, 7.03));
        // sort student list by GPA
        Collections.sort(studentList, new Comparator<Student>() {
            @Override
            public int compare(Student o1, Student o2) {
                return o1.getName().compareTo(o2.getName());
            }
        });
// show student  list
        for (Student student : studentList){
            System.out.println(student.toString());
        }
        System.out.println();

        // sort student list by ID
        Collections.sort(studentList, new Comparator<Student>() {
            @Override
            public int compare(Student o1, Student o2) {
                return o2.getID() - o1.getID();
            }
        });
        // show student list
        for (Student student : studentList){
            System.out.println(student.toString());
        }

    }
}
### 20 / 03 ###

Comparable và Comparator : cả 2 đều là các giao diện và có thể sử dụng để sắp xếp các phần tử collection.
			  đều dùng để so sánh giá trị và java dựa vào đó để scp tăng hay giảm dần.
 * Khác nhau :
 Comparable : + PHẢI implements(thực hiện) giao tiếp Comparable cho lớp đối tượng cần được so sánh.
	     + Comparable cung cấp phương thức compareTo() để sxep các phần tử.
	     + thuộc về java.lang package
	     + có thể step các phần tử của kiểu Comparable bởi pthuc Collections.sort(List)
	     + Pthuc compareTo() sử dụng để so sánh đối tượng hiện tại đối với đối tượng được chỉ định.

 Comparator : + KHÔNG cần phải implements giao tiếp Comparator cho lớp đối tượng cần so sánh.
	      + cung cấp phương thức compare() để sắp xếp các phần tử.
	      + thuộc về java.util package
	      + có thể sắp xếp các phần tử của kiểu Comparator bởi pthuc Collection.sort(List, Comparator)
	      + chứa 2 pthuc là compare(Object obj1, Object obj2) và equals(Object element)

=> comparator(rất linh động) : có thể sử bất kì đối tượng nào(có thể so sánh theo id, theo tên ...
                                                              mà ko phải đụng chạm đến class)
VD :  Comparable :

public class ComparableExample {
    public static void main(String[] args) {
        // create student list
        List<Student> studentList = new ArrayList<>();
        studentList.add(new Student(1,"Linh",24, 8.22));
        studentList.add(new Student(2,"Nguyen",21, 8.44));
        studentList.add(new Student(3,"Thu",22, 7.84));
        studentList.add(new Student(4,"Phuong Anh",22, 7.03));
        // sort student list
        Collections.sort(studentList);
        // show student list
        for (Student student : studentList){
            System.out.println(student.toString());
        }
    }
}
	Comparator :

public class ComparatorExample {
    public static void main(String[] args) {
        // create student list
        List <Student> studentList = new ArrayList<>();
        studentList.add(new Student(1,"Linh",24, 8.22));
        studentList.add(new Student(2,"Nguyen",21, 8.44));
        studentList.add(new Student(3,"Thu",22, 7.84));
        studentList.add(new Student(4,"Phuong Anh",22, 7.03));
        // sort student list by GPA
        Collections.sort(studentList, new Comparator<Student>() {
            @Override
            public int compare(Student o1, Student o2) {
                return o1.getName().compareTo(o2.getName());
            }
        });
// show student  list
        for (Student student : studentList){
            System.out.println(student.toString());
        }
        System.out.println();

        // sort student list by ID
        Collections.sort(studentList, new Comparator<Student>() {
            @Override
            public int compare(Student o1, Student o2) {
                return o2.getID() - o1.getID();
            }
        });
        // show student list
        for (Student student : studentList){
            System.out.println(student.toString());
        }

    }
}




