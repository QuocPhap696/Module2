03 / 04 / 2023
Làm thế nào để Set/HashSet đảm bảo các phần tử không trùng lặp
* Hashset trong java là một lớp kế thừa AbstractSet và triển khai của Set Interface
    trong Collection Framework nên có vài đặc điểm và phương thức tương đồng với set
    - kế thừa lớp AbstractSet và triển khai Interface.
    + HashSet chỉ chứa các phần tử duy nhất.(ko chấp nhận 2 phần tử trùng nhau)
    + Lưu trữ các phần tử bằng cách gọi là băm (hash table)
    + Không đảm bảo thứ tự thêm vào
    + Cho phép chứa phần tử Null.

  * Khởi tạo HashSet :
    HashSet<Integer> numbers = new HashSet<>(8, 0.75);
 add ()
 addAll()  : thêm phần tử vào Hashset

 interator() : truy cập các phần tử của Hashset

 remove()
 removeAll() : xoá các phần tử trong Hashset

 addAll() : lấy phần hợp của 2 set

 retainAll() : lấy phần giao của 2 set

 containsAll() : kiểm tra  1 set có phải tập con của set hay không

 contains() : tìm kiếm phần tử đã chỉ định trong Hashset và trả về boolean.
 isEmpty()  : kiểm tra xem HashSet có trống hay không.
 size () : trả về kích thước
 clear() : Loại bỏ tất cả phần tử khỏi Hashet.
 clone() : tạo bản sao của HashSet

* Set là 1 interface kế thừa Collection interface trong java. Set trong java là 1 Collection các
    phần tử trùng lặp .
    - triển khai bởi HashSet, LinkedHashSet, TreeSet, EnumSet.

 Khai báo Interface Set trong java : public interface Set<E> extends Collection<E>
* phương thức :
boolean add (Object element)      : chèn các phần tử vào set
boolean addAll (Collection c)     : chèn tất cả phần tử của c vào set
void clear()                      : xoá tất cả các phần tử khỏi set
boolean contains(Object element)  : trả true nếu tập hợp chứa phần tử đã chỉ định
boolean containsALl(Collection c) : trả true nếu set chứa tất cả các phần tử của collection c đã định
boolean equals (Object o )        : so sánh đối tượng chỉ định với set
boolean isEmpty()                 : trả true nếu set ko chứa phần tử
int hashCode()                    : trả về giá trị mã băm
Iterator iterator()               : trả về vòng lặp iterator để duyệt qua các phần tử của set
boolean remove(Object o)          : xoá phần tử đã chỉ định khỏi set
boolean removeAll(Collection c)   : xoá khỏi set tất cả các phần tử của nó được chứa trong collection đã chỉ định
boolean retainAll(Collection c)   : giữ lại các phần tử trong set được chứa trong collection c đã chỉ định
int size()                        : trả về số lượng các phần tử của set
Object[] toArray()                : trả về mảng chứa tất cả các phần tử trong set
T[] toArray(T[]a)                 : trả về mảng chứa tất cả phần tử trong set, kiểu run-time của mảng trả về là kiểu đã chỉ định

- Khai báo Set trong java : Set setA = new EnumSet()

* Mối quan hệ giữa equals() và hashCode() trong Java
Equals : Object class mặc định là cha của tất cả class. bên trong định nghĩa sẵn 2 mdethod equals() và hashCode()
(tất cả các class đều mặc định sẵn 2 method này).
- theo nguyên tắc mà hashCode() đưa ra thì 2 Object bằng nhau thì phải có mã hashCode(),
    khi override equals() method thì nhất định phải override hashCode()method.

### 03 / 04 ###
Kĩ thuật đặt tên biến : + sử dụng tên biến có ý nghĩa (mục đích và nội dung của biến )
                        + độ dài tên biến phù hợp
                        + định dạng chuẩn cho tên biến
                        + tránh sử dụng tên biến trùng lặp(ko dùng tên biến giống nhau cho các biến khác nhau)
                        + sử dụng từ viết tắt có ý nghĩa (đảm bảo rằng chúng ý nghĩa)

Kĩ thuật đặt tên phương thức : + nên là  1 động từ hoặc bắt đầu từ 1 động từ
                               + nên bắt đầu từ chữ thường
                               + nên tuân theo quy tắc CamelCase

Kĩ thuật tách biến (extract variable)  : + Nhận diện biểu thức cần tách
                                         + Tạo biến tạm : tạo biến mới để lưu trữ giá trị của biếu thức đó.
                                         + Thay thế biểu thức bằng biến tạm (thay thế biểu thức ban đầu bằng biến tạm vừa tạo )

Kĩ thuật tách hằng (extract constant)  : + Nhận diện giá trị cần tách
                                         + Tạo hằng (tạo hằng mới để lưu giá trị của biểu thức cần tách)
                                         + Thay thế giá trị cố định bằng hằng (thay giá trị cố định bằng hằng vừa tạo)

Kĩ thuật tách phương thức (extract method) : + chọn đoạn mã cần tách
                                             + Tạo 1 phương thức mới (đặt tên phương thức cho dễ hiểu)
                                             + Chuyển đoạn mã vào phương thức mới
                                             + Thay thế đoạn mã cũ (thay bằng 1 phương thức mới)

 ### 04 / 04 ###
 4 tính chất của OOP
* Tính đóng gói(encapsulation) : là ko cho các truy cập từ code bên ngoài như thay đổi trạng thái hay nhìn trực tiếp
                                + được thể hiện thông qua phạm vi truy cập (access modifier)
                                + các lớp liên quan có thể gom chung lại thành package
* Tính kế thừa  : + cho phép xây dựng lớp mới dựa trên định nghĩa của lớp đã có
                  + Lớp đã có là Lớp Cha, lớp mới là lớp con (kế thừa tất cả các thành phần lớp cha, có thể chia sẻ hay mở rộng
                                                        đặc tính sẵn mà ko cần định nghĩa lại)
* Tính đa hình (polymorphism) : + là 1 tác vụ thực hiện theo nhiều cách khác nhau
                                + thể hiện rõ nhất qua việc gọi phương thức đối tượng (pthuc có thể giống nhau nhưng xử lý luồn có thể khác nhau)
                                + sử dụng overloading(nạp chồng phương thức) và overriding(ghi đè phương thức) để có tính đa hình.
   -Overloading(nạp chồng) : + cho phép 1 lớp có nhiều thuộc tính, phương thức cùng tên nhưng với tham số khác nhau về loại cũng như số lượng
                             + Khi gọi, phương thức tương ứng sẽ được thực hiện
   -Overriding(ghi đè)     : + là phương thức cùng tên, tham số, kiểu trả về nhưng thằng con viết lại và dùng theo cách của nó,
                                và xuất hiện lớp cha và tiếp tục xuất hiện lớp con
* Tính trừu tượng (abstraction): + là 1 loại lớp trong OOP, khai báo 1 hoặc nhiều phương thức Abstract
                                 + Lớp này có các Abstract class cũng như các phương thức cụ thể
                                 + Một class bình thường ko thể có các Abstract
                                 + Một Abstract có chứa ít nhất một phương thức abstract

* SOLID : + Một class chỉ nên giữ 1 trách nhiệm duy nhất(chỉ sửa đổi class với 1 lý do duy nhất)
            vd : public class ReportManager()
                 {
                    public void ReadDataFromDB();
                    public void ProcessData();
                    public void PrintReport();
                 } //class này giữ tới 3 nhiệm vụ: Đọc dữ liệu từ DB, xử lý dữ liệu, in kết quả
                   // theo đúng nguyên lý, phải tách clas này làm 3 class riêng

          + Có thể mở rộng 1 class nhưng ko được sửa đổi bên trong class đó
          + Các object của class con có thể thay thế class cha mà ko làm thay đổi tính đúng đắn của chương trình
          + Thay vì dùng 1 interface lớn, ta nên tác thành nhiều interface nhỏ, với nhiều mục đích cụ thể
          + Các module cấp cao ko nên phụ thuộc vào các modules cấp thấp (nên phụ thuộc vào abstraction)
          + Interface ko nên phụ thuộc vào chi tiết và ngược lại
          (các class giao tiếp với nhau thông qua interface, ko thông qua implementation)

### 05 / 04 ###
Ngoại lệ (exception) : là sự kiện xảy ra trong quá trình thực thi chương trình và có thể làm gián đoạn luồng thực thi
                        bình thường của chương trình
                        + ngoại lệ có thể sinh ra bởi chính chương trình hoặc bởi các hàm, phương thức khác mà chương trình sử dụng

* Try Catch : Khi chạy chương trình, có nhiều lỗi khác nhau (do người viết, thông tin đầu vào...) khi đó Java sẽ dừng
                lại và hiển thị lỗi.
              Try Catch có nhiệm vụ bắt(catch) các lỗi mà thực tế có thể xảy ra sao cho chương trình thân thiện với người dùng

vd : try {
         // Code có thể gây ra ngoại lệ
     } catch (ExceptionType1 e1) {
         // Xử lý ngoại lệ của loại 1
     } catch (ExceptionType2 e2) {
         // Xử lý ngoại lệ của loại 2
     } finally {
         // Code sẽ được thực thi sau khi try hoặc catch đã được xử lý xong
     }

* try-catch-finally : sẽ thực thi 3 trường hợp sau
                    + Nếu exception (ngoại lệ) xảy ra bên trong tryblock thì luồng xử lý được chuyển tiếp cho catch block
                      sau đó finally block và thực thi phần còn lại của method
                    + Nếu ko có exception được ném ra bên trong try block. Khối lệnh catch sẽ được bỏ qua và tiến
                      thẳng đến finally block sau đó thực thi phần còn lại method.
                    + Nếu gặp lệnh return trong khối try hoặc catch thì finally block vẫn được thục thi.
   => Khối try : khối lệnh có thể ném ngoại lệ
   => khối catch : khối lệnh sẽ thực hiện nếu ngoại lệnh xảy ra
   => khối finally chắc chắn sẽ được thực thi dù chương trình chạy thành công hay có lỗi đi chăng nữa.
            -- thằng finally có thể có hoặc ko cũng được

vd : try-catch-finnaly
    const numerator = 100, denominator = 'a';

    try {
         console.log(numerator/denominator);
         console.log(a);
    }
    catch (error) {
        console.log('Lỗi đã được bắt!');
        console.log('Thông báo lỗi: ' + error);
    }
    finally {
         console.log('Đoạn mã vẫn được thực thi!');
    }
 => Lỗi đã xảy ra và bị bắt bởi khối cactch, khối finally được thực thi trong mọi tình huống
 *** Lưu ý *** : cần sử dụng câu lệnh catch hoặc finally sau câu lệnh try.
                   nếu ko sẽ báo lỗi ' Uncaught SyntaxError: Missing catch or finally after try. '

* throw : + để ném ra 1 ngoại lệ rõ ràng
          + Ngoại lệ checked ko được truyền ra nếu chỉ sử dụng từ khoá throw
          + Sau throw là 1 interfcae
          + throw được sử dụng trong phương thức
          + Ko thể throw nhiều exceptions

* throws : + sử dụng để khai báo 1 ngoại lệ
           + Ngoại lệ checked được truyền ra ngay cả khi chỉ sử dụng từ khoá throws
           + Sau throws là 1 hoặc nhiều class
           + Throws được khai báo ngay sau dấu đóng ngoặc đơn của phương thức
           + Có thể khai báo exceptions . ví dụ : public void method () throws IOException, SQLExeption.

-- throw ví dụ : public void validateAge(int age) {
             if (age < 0 || age > 150) {
                 throw new IllegalArgumentException("Invalid age: " + age);
             }
         }
//nếu đối số age ko nằm trong khoảng 0 > 150 thì sẽ ném ra ngoại lệ 'IllegalArgumentException' + giá trị age
=> throw giúp chúng ta kiểm soát và xử lí các tình huống bất thường trong chương trình 1 cách chính xác và đúng đắn

--throws ví dụ :
                public static int divide(int dividend, int divisor) throws ArithmeticException {
                    if (divisor == 0) {
                        throw new ArithmeticException("Cannot divide by zero");
                    }
                    return dividend / divisor;
                }
//phương thức 'divide' để thực hiện phép hai số nguyên và ném ra 1 ngoại lệ 'ArithmeticExeption' nếu số chia là 0

### 06 / 04 ###
* Làm việc với File : làm việc với file, tạo file, ghi dữ liệu ra file, xoá file
    + Làm việc với File :để bắt đầu cần tạo 1 đối tượng File bằng khởi tạo với tham số đường dẫn
      Một số phương thức lớp File : exists() kiểm tra xem file có tồn tại hay không
                                  getName() lấy tên file (input-file.txt)
                                  getParent() lấy đường dẫn thư mục của file
                                  getPath() đường dẫn đầy đủ
                                  isDirectory() kiểm tra xem là thư mục hay không
                                  isFile() kiểm tra xem là file hay không
                                  length() cỡ file (byte)
                                  createNewFile() tạo ra file mới
                                  delete() xóa file
                                  list() lấy tên file, thư mục chứa trong đường dẫn
                                  mkdir() tạo thư mục
                                  renameTo(File dest) đổi tên file
    + Tạo mới : Lớp Formatter có thể tạo file mới và dùng để viết nội dung vào file bằng phương thức
          vd : try {
                   Formatter f = new Formatter("C:\\sololearn\\test.txt");
                   f.format("%s %s %s", "1","John", "Smith \r\n");
                   f.close();
               } catch (Exception e) {
                   System.out.println("Error");
               }
    + Đọc nội dung file : Lớp Scanner kế thừa từ lớp Iterator được sử dụng để đọc nội dung file,
                          Nếu đọc theo từng dòng dùng phương thức hasNextLine và nextLine kết kợp.


* Lớp FileReader : sử dụng để đọc dữ liệu từ file, trả về dữ liệu theo dạng byte như lớp FileInputStream.
     + Khai báo : Public class Filereader extends InputStreamReader.
     + Các constructor : - FileReader(String File) : mở file  với tên file ở dạng string đã cho ở chế độ đọc,
                                               Nếu tập tin ko tồn tại, ném ra ngoại lệ FileNotFoundException.
                         - FileReader(File file)   : mở file với thể hiện của file đã cho ở chế độ đọc. Nếu tệp tin ko
                                                tồn tại, ném ra ngoại lệ FileNotFoundException.
     + Các phương thức : - int read() : Nó được sử dụng để trả về 1 ký tự trong mẫu, trả về -1 vào cuối tập tin.
                         - void close() :sử dụng để đóng lớp FileReader.

     ví dụ : đọc dữ liệu từ file testtout.txt sử dụng lớp Java FileReader
             import java.io.FileReader;
             public class FileReaderExample {
                 public static void main(String args[]) throws Exception {
                     FileReader fr = new FileReader("D:\\testout.txt");
                     int i;
                     while ((i = fr.read()) != -1) {
                         System.out.print((char) i);
                     }
                     fr.close();
                 }
             }
* Lớp FileWriter : sử dụng để ghi các dữ liệu theo định dạng ký tự vào 1 file
                   + khi ghi dữ liệu ko cần phải chuyển đổi chuỗi thành mảng byte vì nó cung cấp phương thức để viết chuỗi trực tiếp
    + Khai báo : public class FileWriter extends OutputStreamWriter
    + Các construntor : - FileWriter(String file) : tạo ra file mới với giá trị truyền vào là tên file.
                        - FileWriter(File file)   : tạo ra file mới với giá trị truyền vào là đối tượng file.
    + Các phương thức : void write (String text)  : ghi String vào FileWriter
                        void write(char c)        : ghi char vào FileWriter
                        void write(char[] c)      : ghi mảng char vào FileWriter
                        void flush()              : xả dữ liệu của FileWriter
                        void close()              : đóng FileWriter
    ví dụ : ghi dữ liệu vào file testout.txt bằng lớp Java FileWriter.

            import java.io.FileWriter;
            public class FileWriterExample {
                public static void main(String args[]) {
                    try {
                        FileWriter fw = new FileWriter("D:\\testout.txt");
                        fw.write("Welcome to java.");
                        fw.close();
                    } catch (Exception e) {
                        System.out.println(e);
                    }
                    System.out.println("Success...");
                }
            }

* Lớp BufferedWriter : sử dụng để cung cấp bộ đệm cho các thể hiện của lớp Writer.
                     Giúp hiệu suất nhanh, nó kế thừa lớp Writer.
    + Khai báo : public class BufferedWriter extends Writer
    + Các constructor : - BufferdWriter(Writer wrt) : sử dụng để tạo ra thể hiện của BufferedWriter có sử dụng kích
                           thước mặc định cho 1 bộ đệm đầu ra.
                        - BufferedWriter(Writer wrt, int size) : sử dụng để tạo ra thể hiện của BufferedWriter mà sủ dụng
                            kích thước quy định cho1 bộ đệm rầu ra.
    + Các phương thức : void newLine()                            : thêm 1 dòng mới với dấu xuống dòng
                        void write(int c)                         : ghi 1 ký tự duy nhất
                        void write(char[] cbuf, int off, int len) : ghi 1 phần của 1 mảng các ký tự
                        void write(String s, int off, int len)    : ghi 1 phần của 1 chuỗi
                        void flush()                              : để xả BufferedWriter.
                        void close()                              : để đóng BufferedWriter.
    ví dụ : ghi dữ liệu vào file testout.txt bằng Java BufferedWriter
            import java.io.BufferedWriter;
            import java.io.FileWriter;
            public class BufferedWriterExample {
                public static void main(String[] args) throws Exception {
                    FileWriter writer = new FileWriter("D:\\testout.txt");
                    BufferedWriter buffer = new BufferedWriter(writer);
                    buffer.write("Welcome to java.");
                    buffer.close();
                    System.out.println("Success...");
                }
            }
* Lớp BufferedWriter : sử dụng để đọc văn bản từ 1 input stream dựa trên các ký tự (character stream).
                Nó có thể được sử dụng để đọc dữ liệu theo dòng (line by line) bằng phương thức readLine().
                Giúp hiệu suất nhanh, kế thừa lớp Reader.
    + Khai báo : public class BufferedReader extends Reader
    + Các constructor : - BufferedReader (Reader rd) : sử dụng để tạo ra thể hiện của BufferedReader mà sử dụng kích thước
                                    mặc định cho bộ đệm đầu vào.
                        - BufferedReader(Reader rd, int size) : sử dụng để tạo ra thể hiện của BufferedReader có sử dụng
                                    kích thước quy định cho 1 bộ đệm đầu vào.
    + Các phương thức : - int read()                              : sử dụng để đọc ký tự vật duy nhất.
                        - int read(char[] cbuf, int off, int len) : sử dụng để đọc ký tự thành 1 phần của 1 mảng
                        - boolean markSupported()                 : sử dụng để kiểm tra input stream có hỗ trợ các phương thức
                                                                    mark() và reset() không.
                        - String readLine()                       : sử dụng để đọc 1 dòng văn bản
                        - boolean ready()                         : sử dụng để kiểm tra liệu các input stream đã sẵn sàng để được đọc
                        - long skip(long n)                       : sử dụng để bỏ qua n ký tự.
                        - void reset()                            : định vị lại stream tại vị trí mà phương thức đánh dấu lần cuối
                                                                    được gọi vào input stream này.
                        - void mark(int readAheadLimit)           : sử dụng để đánh dấu vị trí hiện tại trong 1 stream.
                        - void close()                            : đóng các dòng đầu vào và giải phóng bất kỳ tài nguyên hệ thống nào
                                                                    liên kết đến stream.
    ví dụ : đọc dữ liệu từ file văn bản testout.txt sử dụng lớp Java BufferedReader.
            import java.io.BufferedReader;
            import java.io.FileReader;
            public class BufferedReaderExample {
                public static void main(String args[]) throws Exception {
                    FileReader fr = new FileReader("D:\\testout.txt");
                    BufferedReader br = new BufferedReader(fr);

                    int i;
                    while ((i = br.read()) != -1) {
                        System.out.print((char) i);
                    }
                    br.close();
                    fr.close();
                }
            }